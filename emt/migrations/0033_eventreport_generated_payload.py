# Generated by Django 5.2.3 on 2025-09-28 09:44

from django.db import DatabaseError, migrations, models


def _normalize_table_name(table_name: str) -> str:
    """Return the database table name without schema or quoting."""

    return table_name.replace('"', "").split(".")[-1]


def _column_exists(schema_editor, table_name: str, column_name: str) -> bool:
    """Check if ``column_name`` already exists on ``table_name``."""

    normalized_table = _normalize_table_name(table_name)
    connection = schema_editor.connection
    with connection.cursor() as cursor:
        try:
            description = connection.introspection.get_table_description(
                cursor, normalized_table
            )
        except DatabaseError:
            return False

    return any(column.name == column_name for column in description)


def _add_generated_payload_column(apps, schema_editor):
    EventReport = apps.get_model("emt", "EventReport")
    if _column_exists(schema_editor, EventReport._meta.db_table, "generated_payload"):
        return

    field = models.JSONField(
        default=dict,
        blank=True,
        help_text=(
            "Stores the most recent autosave payload so partially completed "
            "reports can be recovered without breaking database constraints."
        ),
    )
    field.set_attributes_from_name("generated_payload")
    field.model = EventReport
    schema_editor.add_field(EventReport, field)


def _remove_generated_payload_column(apps, schema_editor):
    EventReport = apps.get_model("emt", "EventReport")
    if not _column_exists(
        schema_editor, EventReport._meta.db_table, "generated_payload"
    ):
        return

    field = models.JSONField(
        default=dict,
        blank=True,
        help_text=(
            "Stores the most recent autosave payload so partially completed "
            "reports can be recovered without breaking database constraints."
        ),
    )
    field.set_attributes_from_name("generated_payload")
    field.model = EventReport
    schema_editor.remove_field(EventReport, field)


class Migration(migrations.Migration):

    dependencies = [
        ("emt", "0032_remove_session_feedback"),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name="eventreport",
                    name="generated_payload",
                    field=models.JSONField(
                        blank=True,
                        default=dict,
                        help_text=(
                            "Stores the most recent autosave payload so partially "
                            "completed reports can be recovered without breaking "
                            "database constraints."
                        ),
                    ),
                ),
            ],
            database_operations=[
                migrations.RunPython(
                    _add_generated_payload_column,
                    _remove_generated_payload_column,
                )
            ],
        ),
    ]
